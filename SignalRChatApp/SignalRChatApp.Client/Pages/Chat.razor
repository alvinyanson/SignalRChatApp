@page "/"

@using Microsoft.AspNetCore.SignalR.Client

@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="alert alert-info" role="alert">
    <h3>Public Chat</h3> Fill in the fields and submit, then open another tab, fill in the fields again, and submit to trigger a notification message
</div>

@* Name *@
<div class="mb-3">
    <label class="form-label">You are</label>
    <input @bind="loggedInUser" type="text" disabled class="form-control">
</div>

@* Message List *@
<textarea style="width: 100%; height: 500px;" @ref="TextAreaRef">
    @messages
</textarea>

@* Message and submit button *@
<div class="input-group">
    <input @bind-value="messageInput"
           @bind-value:event="oninput"
           @onkeyup="HandleInput"
           placeholder="Enter message..."
           class="form-control">

    <button class="btn btn-primary form-group-append"
            @onclick="SendMessage"
            disabled="@(!IsConnected)">
        Send
    </button>
</div>

@code {
    private HubConnection? hubConnection;

    private string? messages;
    private string? messageInput;
    private string loggedInUser = "Anonymous";

    ElementReference TextAreaRef;

    [Inject] private AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    // Initialize hub
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user is not null && user.Identity is not null)
        {
            if (user.Identity.IsAuthenticated)
            {
                loggedInUser = user.Identity.Name!;
                // You can access other claims as well
                // var email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            }
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("SuccessSendMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    // Send Message
    private async Task SendMessage()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", loggedInUser, messageInput);
            messageInput = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await SendMessage();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}