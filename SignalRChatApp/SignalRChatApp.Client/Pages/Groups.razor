@page "/groups"

@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable


<h3>Groups</h3>

<div class="alert alert-info" role="alert">
    Choose a group, then open another tab and select the same group to trigger a notification message.
</div>

<div class="row mb-3">
    @foreach (var group in groups)
    {
        <div class="col-12 col-sm-4 col-md-3 col-lg-2">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title mb-5">@group</h5>
                    <button disabled="@(!IsConnected)" type="button" class="btn btn-primary w-100" @onclick="() => JoinGroup(group)">JOIN</button>
                </div>
            </div>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(groupName))
{
    <div class="mb-3">
        <label class="form-label">Send Message to group <b>@groupName</b></label>
        <textarea @bind="messageInput" class="form-control" rows="3"></textarea>
    </div>

    <button type="button" class="btn btn-primary mb-3" @onclick="SendMessageToGroup" disabled="@(!IsConnected)">Send Message</button>
}

<div id="messagesList mt-2">
    @foreach (var message in messages.AsEnumerable().Reverse())
    {
        <div class="alert alert-primary" role="alert">
            @message
        </div>
    }
</div>

@code {

    private HubConnection? hubConnection;


    private List<string> groups = new List<string>() { "Group 1", "Group 2", "Group 3", "Group 4" };
    private List<string> messages = new List<string>();
    private string? groupName;

    private string? messageInput;

    // Initialize hub
    protected override async Task OnInitializedAsync()

    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("SuccessSendMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    // Join Group
    private async Task JoinGroup(string selectedGroupName)
    {
        if (hubConnection is not null && selectedGroupName != string.Empty)
        {
            groupName = selectedGroupName;
            await hubConnection.SendAsync("JoinGroup", selectedGroupName);
        }
    }

    // Send Message To Group
    private async Task SendMessageToGroup()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageToGroup", groupName, messageInput);
            messageInput = string.Empty;
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
