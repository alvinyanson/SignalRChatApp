@page "/groups"

@using Microsoft.AspNetCore.SignalR.Client

@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="alert alert-info" role="alert">
    <h3>Groups</h3> Choose a group, then open another tab and select the same group to trigger a notification message.
</div>

<div class="row mb-3">
    @foreach (var group in groups)
    {
        <div class="col-12 col-sm-4 col-md-3 col-lg-2">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title mb-5">@group</h5>
                    <button disabled="@(!IsConnected)" type="button" class="btn btn-primary w-100" @onclick="() => JoinGroup(group)">JOIN</button>
                </div>
            </div>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(groupName))
{
    @* Name *@
    <div class="mb-3">
        <label class="form-label">You are</label>
        <input @bind="loggedInUser" type="text" disabled class="form-control">
    </div>

    @* Message List *@
    <textarea style="width: 100%; height: 400px;" @ref="TextAreaRef">
        @messages
    </textarea>


    @* Message and submit button *@
    <div class="input-group">
        <input @bind-value="messageInput"
               @bind-value:event="oninput"
               @onkeyup="HandleInput"
               placeholder="Enter message for @groupName..."
               class="form-control">

        <button class="btn btn-primary form-group-append"
                @onclick="SendMessageToGroup"
                disabled="@(!IsConnected)">
            Send
        </button>
    </div>
}


@code {

    private HubConnection? hubConnection;
    private List<string> groups = new List<string>() { "Group 1", "Group 2", "Group 3", "Group 4" };
    
    private string? messages;
    private string? groupName;
    private string? messageInput;
    private string loggedInUser = "Anonymous";

    ElementReference TextAreaRef;

    [Inject] private AuthenticationStateProvider? AuthenticationStateProvider { get; set; }


    // Initialize hub
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user is not null && user.Identity is not null)
        {
            if (user.Identity.IsAuthenticated)
            {
                loggedInUser = user.Identity.Name!;
            }
        }


        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("SuccessSendMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    // Join Group
    private async Task JoinGroup(string selectedGroupName)
    {
        if (hubConnection is not null && selectedGroupName != string.Empty)
        {
            groupName = selectedGroupName;

            await hubConnection.SendAsync("JoinGroup", selectedGroupName, loggedInUser);
            
            messages = string.Empty;
        }
    }

    // Send Message To Group
    private async Task SendMessageToGroup()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessageToGroup", groupName, loggedInUser, messageInput);
            messageInput = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await SendMessageToGroup();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
